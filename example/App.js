/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { Component } from 'react';
import { Platform, StyleSheet, Text, View } from 'react-native';
import ModbusTcp from 'react-native-modbus-tcp';

export default class App extends Component<{}> {
  state = {
    connectionStatus:'',
    readCoil: '',
    readDiscreteInput: '',
    readHoldingRegisters: '',
    readInputRegisters: '',
    writeCoil: '',
    writeCoils: '',
    writeRegister: '',
    writeRegisters: '',
    destroyCon: ''
  };
  componentDidMount() {

    // Connect to Modbus TCP Master (parameters [ip, port])
    ModbusTcp.connectToModbusMaster('192.168.137.32', 502, (res) => {
      this.setState({
        connectionStatus:res
      });
    });

    // Read Coil (parameters [slaveid, start, length])
    ModbusTcp.readCoil(248, 1, 2, (res) => {
      this.setState({
        readCoil:res
      });
    });
    

    // Read Discrete Input (parameters [slaveid, start, length])
    ModbusTcp.readDiscreteInput(248, 1, 5, (res) => {
      this.setState({
        readDiscreteInput:res
      });
    });

    // Read Holding Registers (parameters [slaveid, start, length])
    ModbusTcp.readHoldingRegisters(248, 2, 8, (res) => {
      this.setState({
        readHoldingRegisters:res
      });
    });

    // Read Input Registers (parameters [slaveid, start, length])
    ModbusTcp.readInputRegisters(248, 2, 8, (res) => {
      this.setState({
        readInputRegisters:res
      });
    });

    // Write Coil (parameters [slaveid, offset, value])
    ModbusTcp.writeCoil(248, 1, true, (res) => {
      this.setState({
        writeCoil:res
      });
    });

    // Write Coils (parameters [slaveid, start, values])
    ModbusTcp.writeCoils(248, 2, [true,true,true,true], (res) => {
      this.setState({
        writeCoils:res
      });
    });

    // Write Register (parameters [slaveid, offset, value])
    ModbusTcp.writeRegister(248, 1, 150, (res) => {
      this.setState({
        writeRegister:res
      });
    });

    // Write Registers (parameters [slaveid, start, values])
    ModbusTcp.writeRegisters(248, 2, [500,505,304,1004,600], (res) => {
      this.setState({
        writeRegisters:res
      });
    });

    //if (this.state.writeRegisters === 'Success') {
      // Destroy Connection
      ModbusTcp.destroyConnection((res) => {
        this.setState({
          destroyCon:res
        });
      });
    //}
  }
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆ModbusTcp example☆</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK CONNECTION STATUS☆</Text>
        <Text style={styles.instructions}>{this.state.connectionStatus}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK READ COIL☆</Text>
        <Text style={styles.instructions}>{this.state.readCoil}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK READ DISCRETE INPUT☆</Text>
        <Text style={styles.instructions}>{this.state.readDiscreteInput}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK READ HOLDING REGISTERS</Text>
        <Text style={styles.instructions}>{this.state.readHoldingRegisters}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK READ INPUT REGISTERS</Text>
        <Text style={styles.instructions}>{this.state.readInputRegisters}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK WRITE COIL</Text>
        <Text style={styles.instructions}>{this.state.writeCoil}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK WRITE COILS</Text>
        <Text style={styles.instructions}>{this.state.writeCoils}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK WRITE REGISTER</Text>
        <Text style={styles.instructions}>{this.state.writeRegister}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK WRITE REGISTERS</Text>
        <Text style={styles.instructions}>{this.state.writeRegisters}</Text>
        <Text style={styles.welcome}>☆NATIVE CALLBACK DESTROY CONNECTION</Text>
        <Text style={styles.instructions}>{this.state.destroyCon}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
